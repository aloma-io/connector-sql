name: Docker Builds

# Controls when the workflow will run
on:
  push:
    tags:
      - "*.*.*"

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Get the repositery's code
      - name: Checkout
        uses: actions/checkout@v4
      - name: Retrieve version
        run: |
          echo -n "TAG_NAME=$(git describe --tags)" > .version
        id: version
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/aloma-io/connector-sql
          # generate Docker tags based on the following events/attributes
          tags: |
            type=semver,pattern={{version}}
      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./Containerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Update notification
        env:
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
        run: |
          export REFNAME=$(echo $GITHUB_REF | cut -d '/' -f 3)
          VERSION="$REFNAME"

          update="{\"build\": {\"type\": \"connector\", \"connectorId\": \"clbtxa4dh000001mcdyym0wm1\", \"image\": \"ghcr.io/aloma-io/connector-sql:${VERSION}\", \"version\": \"${VERSION}\"}}"

          curl -X POST -H 'Content-type: application/json' --data-binary "$update" "$WEBHOOK_URL"
          
      